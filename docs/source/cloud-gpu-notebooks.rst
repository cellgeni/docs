GPU Notebooks on the Cloud
==========================

.. note::
    **Only members of the Cellular Genetics Programme and their collaborators are eligible for access**.

Cloud GPU Notebooks is a new service provided by CellGen IT team. The service utilizes Cloud resources (Google Compute Platform) and is paid for by the `Cellular Genetics Programme <https://www.sanger.ac.uk/programme/cellular-genetics/>`_. 

Bespoke notebooks can have T4 GPU accelerators with 16GB GPU RAM and Virtual Machines with up to 624GB RAM. In addition up to 8 GPUs can be attached to an instance.

See `official list <https://cloud.google.com/compute/docs/gpus#gpus-list>`_ for specs on what types of custom machines can be requested.


Request a notebook
------------------

Please fill in `this form <https://forms.gle/NLdvCHnzjgZXcXPD7>`_ and we will action on your request and be in touch with you the same or the next day.

.. note::
    Alternatively, you can try the free version of `Google Colab <https://colab.research.google.com/>`_ has only the K80 GPU type, up to 12GB RAM and 12 hours of execution time by yourself wihtout contacting  CellGenIT. 


Accessing your instance
-----------------------

After your request has been processed, you'll receive a custom link to access your notebook.
You need to make sure that your ``user@sanger.ac.uk`` Sanger Google Account is used to login, if you are using another Google Account you'll get a ``403 Error``.
We suggest using Incognito/Private mode in your web browser to access the link so it does not get mixed with your Personal Google Account.


Installed software
------------------

The cloud notebook probably won't have the same setup as you've got on your Jupyter. Some packages are installed by default (Python and CUDA).
The best thing is to have a list of all your required packages so it's easier to install them all in a new compute instance. 
Should you require more packages, you can install them yourself. It's a good idea to add install steps or scripts to your notebooks. 

- If you choose to install packages using a script, remember to activate the conda environment before running the script or inside the script itself.

.. code-block:: bash

    conda activate myenv
    conda install YYY

- If you choose to install using a notebook, remember to use cell magic like this can help you install packages in from your notebooks:

.. code-block:: bash

    %pip install XXX 
    %conda install YYY

Alternatively, create environments from dependency files like the ones generated by

.. code-block:: bash

    conda env export > environment.yml

and then import them on the cloud env

.. code-block:: bash

    conda env create -f environment.yml

.. tip::

    GPU Cloud Notebooks have CUDA 11 installed, use the following commnad to install pytoch and guarantee it uses GPU:
    
    .. code-block:: python

        pip install torch==1.10.2+cu113 torchvision==0.11.3+cu113 torchaudio==0.10.2+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html


Getting data to the cloud
-------------------------

Notebooks on the cloud can't access the farm so you need to pivot the data to get it to the cloud. We recommend using rclone to do this. To install rclone on your GPU Cloud Notebook simply:

.. code-block:: bash

    curl https://rclone.org/install.sh | sudo bash


Use rclone to copy data from the farm to Google Drive and then pull that data from Google Drive to your cloud compute environment. 

Please, read our quick guide for `setting up rclone <https://cellgeni.readthedocs.io/en/latest/rclone.html>`_. 

For more information read the `official rclone google drive <https://rclone.org/drive/>`_ page. 

.. note:: 

    **FARM rlcone**: two different versions of ``rclone`` live on the farm. Make sure you're using the one from ``/software/rclone/rclone`` because that's the latest.


Shutting down your instance
---------------------------

It's important not to keep your notebook idle. If you're done for the day and you're not going to be using it anymore, please shut it down using:

.. code-block:: bash

    sudo poweroff

or

.. code-block:: bash

    sudo shutdown -h now

It will take a couple minutes and then will turn off. You can also let us know you've finished and we'll shut it down for you.
